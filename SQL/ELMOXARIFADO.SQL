
DROP DATABASE IF EXISTS ELMOXARIFADO;

CREATE DATABASE ELMOXARIFADO;

CREATE TABLE FERRAMENTA(
CODIGO SERIAL,
DESCRICAO VARCHAR(50)NOT NULL,
FABRICANTE VARCHAR(50),
VALOR DECIMAL(7,2) NOT NULL,
DISPONIBILIDADE BOOLEAN DEFAULT TRUE,
CONSTRAINT PK_FERRAMENTA PRIMARY KEY (CODIGO)
);


CREATE TABLE FUNCIONARIO(
MATRICULA INT,
NOME VARCHAR(50) NOT NULL,
SETOR VARCHAR(15) NOT NULL,
RAMAL VARCHAR(15) NOT NULL,
CONSTRAINT PK_FUNCIONARIO PRIMARY KEY (MATRICULA)
);

CREATE TABLE USUARIO(
	ID_USER SERIAL,
	LOGIN VARCHAR(20)UNIQUE NOT NULL,
	SENHA VARCHAR(20)NOT NULL,
	E_MAIL VARCHAR(30)UNIQUE NOT NULL,
	COD_FUNC INT UNIQUE,
	CONSTRAINT PK_USUARIO PRIMARY KEY (ID_USER),
	CONSTRAINT FK_FUNCIONARIO FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO(MATRICULA) 
	);

CREATE TABLE EMPRESTIMO(
	USUARIO_ID INT NOT NULL,
	FERRAMENTA_ID INT NOT NULL,
	INICIO DATE DEFAULT CURRENT_DATE,
	VALIDADE DATE NOT NULL,
	FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID_USER),
	FOREIGN KEY (FERRAMENTA_ID) REFERENCES FERRAMENTA(CODIGO),
	CHECK (VALIDADE > CURRENT_DATE)
);


CREATE VIEW INDISPONIVEIS AS
SELECT * FROM FERRAMENTA
WHERE DISPONIBILIDADE = FALSE;

CREATE VIEW EMPRESTIMOATRASO AS
SELECT * FROM EMPRESTIMO 
WHERE VALIDADE < CURRENT_DATE;


CREATE TABLE REGISTRO(
	USUARIO NAME,
	OPERAÇÃO VARCHAR(10),
	TABELA VARCHAR(50),
	DATA_ALTERAÇÃO TIMESTAMP);
	
	
CREATE OR REPLACE FUNCTION REGISTRO()
RETURNS trigger AS $$
BEGIN
INSERT INTO REGISTRO VALUES(CURRENT_USER,TG_OP,TG_TABLE_NAME,CURRENT_TIMESTAMP);
RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER  REGISTRAR_EM AFTER INSERT OR UPDATE OR DELETE
ON EMPRESTIMO
FOR EACH STATEMENT 
EXECUTE PROCEDURE REGISTRO();

CREATE TRIGGER  REGISTRAR_FER AFTER INSERT OR UPDATE OR DELETE
ON FERRAMENTA
FOR EACH STATEMENT 
EXECUTE PROCEDURE REGISTRO();

CREATE TRIGGER  REGISTRAR_FUN AFTER INSERT OR UPDATE OR DELETE
ON FUNCIONARIO
FOR EACH STATEMENT 
EXECUTE PROCEDURE REGISTRO();

CREATE TRIGGER  REGISTRAR_FUN AFTER INSERT OR UPDATE OR DELETE
ON USUARIO
FOR EACH STATEMENT 
EXECUTE PROCEDURE REGISTRO();

/*PARA TORNAR MAIS ORGANIZADA A TABELA EMPRÉSTIMO E FERRAMENTA, 
CRIAREMOS ÍNDICES QUE AS OREDENARÃO A PARTIR DAS CHAVES CODIGO 
E ID_USUARIO RESPECTIVAMENTE.
AMBAS SERÃO UTILIZADAS EM OPERAÇÕES CONSTANTES DE ENTRADA E 
SAÍDA DO ESTOQUE DE FERRAMENTAS. */

CREATE UNIQUE INDEX FERRAMENTA_1 ON FERRAMENTA(CODIGO ASC);

/*POSSUI CONDIÇÃO UNIQUE POIS ORDENA A PARTIR DE CHAVE PRIMÁRIA*/

CREATE INDEX EMPRESTIMO_1 ON EMPRESTIMO(USUARIO_ID ASC);

/* NÃO POSSUI CONDIÇÃO UNIQUE, POIS UM USUÁRIO PODE POSSUIR MAIS 
DE UM EMPRÉSTIMO*/


